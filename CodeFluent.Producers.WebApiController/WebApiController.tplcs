//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the WebApiControllerProducer.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
[%
	string entityName =  TemplateProducer.Entity.Name;
	string entityNameLower =  TemplateProducer.Entity.Name.ToLower();
	string entityCollection =  TemplateProducer.Entity.SetFullTypeName;
	string entityNamespace =  TemplateProducer.Entity.Namespace;
	string entitySchema =  TemplateProducer.Entity.Schema;
	string entityFQDN =  TemplateProducer.Entity.ClrFullTypeName;
%]

namespace [%=TemplateProducer.Entity.Namespace%].Web.ApiControllers
{
    using System.Collections.Generic;
    using System;
    using System.Net;
    using System.Net.Http;
    using System.Web.Http;
	using [%=entityNamespace%];

	[% if(TemplateProducer.AssociatedAuthorize != null && TemplateProducer.AssociatedAuthorize != "") { %]
	[Authorize(Roles = "[%=TemplateProducer.AssociatedAuthorize%]")]
	[% } else { %]
    [Authorize()]
	[% } %]

	[RoutePrefix("api/[%=TemplateProducer.getRouteSchema()%][%=entityName%]")]
    public partial class [%=entityName%]Controller: [%=TemplateProducer.AssociatedBaseClass%] 
    {

		#region GET
        [HttpGet]
        [Route("")]
        public virtual IHttpActionResult Get() {
            return Ok([%=entityCollection%].LoadAll());
        }

		[HttpGet]
        [Route("[%=TemplateProducer.getUrlParamKeyForEntity()%]")]
        public virtual IHttpActionResult getById([%=TemplateProducer.getParamKeyTypedForEntity()%])
        {
            return Ok([%=entityFQDN%].Load([%=TemplateProducer.getParamKeyForEntity()%]));
        }

		[HttpGet]
        [Route("{offset:int}/{limit:int}")]
        public virtual IHttpActionResult get[%=entityName%](int offset, int limit)
        {
            return Ok([%=entityCollection%].PageLoadAll(offset, limit));
        }
		#endregion

		#region METHODS
		[%  foreach(CodeFluent.Model.Code.Method method in TemplateProducer.getUserDefinedMethods()) {
				if(TemplateProducer.isMethodSuported(method)) {
		%]
		[HttpGet]
        [Route("[%=method.Name%]/[%=TemplateProducer.getUrlParamForMethod(method)%]")]
        public virtual IHttpActionResult [%=method.Name%]([%=TemplateProducer.getTypedParamForMethod(method)%])
        {
            return Ok([%=TemplateProducer.getLocationForMethod(method)%].[%=method.Name%]([%=TemplateProducer.getParamForMethod(method)%]));
        }
		[%			if(!method.IsDistinct && method.MethodType != CodeFluent.Model.Code.MethodType.Delete && method.MethodType != CodeFluent.Model.Code.MethodType.Count) {
		
		%]
		[HttpGet]
        [Route("[%=method.Name%]OffsetLimit/[%=TemplateProducer.getUrlParamForMethodOffsetLimit(method)%]")]
        public virtual IHttpActionResult [%=method.Name%]OffsetLimit([%=TemplateProducer.getTypedParamForMethodOffsetLimit(method)%])
        {
            return Ok([%=TemplateProducer.getLocationForMethod(method)%].Page[%=method.Name%]([%=TemplateProducer.getParamForMethodOffsetLimit(method)%]));
        }
		[%			}	
		
		%]
		[%
				} 
			} 
		%]
		#endregion

		#region POST
		[Route("")]
        public virtual IHttpActionResult Post([FromBody][%=entityFQDN%] new[%=entityName%])
        {
            IHttpActionResult httpResponseMessage;

            try
            {
                if (new[%=entityName%] != null)
                {
                    new[%=entityName%].EntityState = CodeFluent.Runtime.CodeFluentEntityState.Created;
                    if (!new[%=entityName%].Save())
                    {
                        httpResponseMessage = BadRequest("{0} n'a pas pu être sauvé.");
                    }
                    else {
                        httpResponseMessage = Ok(new[%=entityName%]);
                    }
                }
                else {
                    httpResponseMessage = BadRequest("{0} est null.");
                }
            }
            catch (Exception exc)
            {
                httpResponseMessage = BadRequest(exc.Message);
            }

            return httpResponseMessage;
        }

		#endregion

		#region PUT
		[Route("")]
        public virtual IHttpActionResult Put([FromBody][%=entityFQDN%] [%=entityNameLower%])
        {
            IHttpActionResult httpResponseMessage;

            try
            {
                if ([%=entityNameLower%] != null)
                {
                    [%=entityNameLower%].EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                    if (![%=entityNameLower%].Save())
                    {
                        httpResponseMessage = BadRequest("{0} n'a pas pu être sauvé.");
                    }
                    else {
                        httpResponseMessage = Ok([%=entityNameLower%]);
                    }
                }
                else {
                    httpResponseMessage = BadRequest("{0} est null.");
                }
            }
            catch (Exception exc)
            {
                httpResponseMessage = BadRequest(exc.Message);
            }

            return httpResponseMessage;
        }
		#endregion

		#region DELETE
		[Authorize]
        [Route("[%=TemplateProducer.getUrlParamKeyForEntity()%]")]
        public virtual IHttpActionResult Delete([%=TemplateProducer.getParamKeyTypedForEntity()%])
        {

            IHttpActionResult httpResponseMessage;

            try
            {

                [%=entityFQDN%] old[%=entityName%] = [%=entityFQDN%].Load([%=TemplateProducer.getParamKeyForEntity()%]);
                if (old[%=entityName%] != null)
                {
                    old[%=entityName%].EntityState = CodeFluent.Runtime.CodeFluentEntityState.ToBeDeleted;
                    if (!old[%=entityName%].[%=TemplateProducer.getDeleteMethod()%]())
                    {
                        httpResponseMessage = BadRequest("{0} ne peut pas être supprimé.");
                    }
                    else {
                        httpResponseMessage = Ok();
                    }
                }
                else {
                    httpResponseMessage = BadRequest("{0} n'a pas été trouvé.");
                }
            }
            catch (Exception exc)
            {
                httpResponseMessage = BadRequest(exc.Message);
            }

            return httpResponseMessage;
        }
		#endregion
 
    }
}